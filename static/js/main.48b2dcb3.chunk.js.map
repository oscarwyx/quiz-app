{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/911image.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","EASY","startTrivia","newQuestions","length","undefined","e","currentTarget","prev","answerObject","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48b2dcb3.chunk.js","sourcesContent":["import {shuffleArray} from './utils';\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = Question & { answers: string[]};\n\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\",\n}\n\n\n export const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<[]> => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question)=>(\n        {\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers,question.correct_answer])\n            \n        }\n    ))\n }","export const shuffleArray = (array: any[]) =>\n    [...array].sort(()=> Math.random() - 0.5);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n\n","import React from 'react';\n//types\nimport { AnswerObject } from '../App';\n//Styles\nimport {Wrapper , ButtonWrapper } from './QuestionCard.styles';\n\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>)=> void;\n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({\n    question, \n    answers,\n    callback,\n    userAnswer,\n    questionNr,\n    totalQuestions\n}) => (\n    <Wrapper>\n        <p className=\"number\">\n            Question: {questionNr} / {totalQuestions}\n        </p>\n        <p dangerouslySetInnerHTML={{__html: question}} />\n        <div>\n            {answers.map(answer => (\n                <ButtonWrapper \n                    key={answer}\n                    correct = {userAnswer?.correctAnswer === answer}\n                    userClicked = {userAnswer?.answer === answer}\n                >\n                    <button disabled = {userAnswer ? true:false} value={answer} onClick={callback}>\n                        <span dangerouslySetInnerHTML={{__html: answer}}/>\n                    </button>\n                </ButtonWrapper>\n            ))}\n        </div>\n    </Wrapper>\n);\n\nexport default QuestionCard\n","export default __webpack_public_path__ + \"static/media/911image.86115514.jpg\";","import styled, {createGlobalStyle } from 'styled-components';\nimport BGImage from './images/911image.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n    html{\n        height: 100%;\n    }\n     body{\n         background-image: url(${BGImage});\n         background-size:cover;\n         margin: 0;\n         padding: 0 20px;\n         display: flex;\n         justify-content: center;\n     }\n\n     *{\n         box-sizing: border-box;\n         font-family: 'Catamaran', sans-serif;\n     }\n`;\n\nexport const Wrapper = styled.div`\n     display: flex;\n     flex-direction: column;\n     align-items: center;\n     > p {\n         color: #fff;\n     }\n     .score{\n         color: #fff;\n         font-size: 2rem;\n         margin: 0;\n     }\n     h1{\n        font-family: Fascinate Inline;\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\n        font-weight: 400;\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-size: 70px;\n        font-weight: 400;\n        text-align: center;\n        margin: 20px;\n     }\n     .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #ffffff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n      }\n      .start {\n        max-width: 200px;\n      }\n`;","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n// Components\nimport QuestionCard from './components/QuestionCard';\n//Types\nimport { QuestionState, Difficulty } from './API';\n// styles\nimport { GlobalStyle, Wrapper} from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading,setLoading] = useState(false);\n  const [questions,setQuestions] = useState<QuestionState[]>([]);\n  const[number,setNumber] = useState(0);\n  const [userAnswers,setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const[gameOver, setGameOver] = useState(true);\n\n  console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY));\n\n  const startTrivia = async ()=>{\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>)=> {\n    if(!gameOver) {\n      //user answer\n      const answer = e.currentTarget.value;\n      //check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      //add score if answer is correct\n      if(correct) setScore(prev => prev +1);\n      // save answer in th array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev,answerObject]);\n    }\n  }\n\n\n  const nextQuestion = () => {\n    // move on to the next question if not the last question\n    const nextQuestion = number + 1;\n\n    if(nextQuestion === TOTAL_QUESTIONS){\n      setGameOver(true);\n    }else{\n      setNumber(nextQuestion);\n    }\n  }\n\n\n\n  return (\n    <>\n    <GlobalStyle />\n    <Wrapper>\n      <h1>Yongxu's Quiz</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ?(\n        <button className=\"start\" onClick = {startTrivia}>\n          Start Quiz\n        </button>\n      ): null}\n      {!gameOver ? <p className=\"score\">Score: {score} </p> : null}\n      {loading && <p>Loading Questions ...</p>}\n      {!loading && !gameOver &&(\n        <QuestionCard \n          questionNr = {number + 1}\n          totalQuestions = {TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers = {questions[number].answers}\n          userAnswer = {userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n      )}\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ?(\n        <button className=\"next\" onClick={nextQuestion}>\n          Next Question\n        </button>\n      ):null}\n      \n    </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}